from typing import List, Literal, Annotated
from datetime import date, timedelta

from fastapi import APIRouter, Depends, status, Query, Path, UploadFile, Form, File, Request, HTTPException
from sqlalchemy.orm import Session
from annotated_types import MinLen, MaxLen
from pydantic import EmailStr
from google.oauth2 import id_token
from google.auth.transport import requests as google_requests
from dotenv import load_dotenv
import os

from project.db.database import get_db
from project.db.models import Subscription, User
from project.schemas.user_schemas import UserRegister , UserShowAll , BlockUser, PaymentRequest, GoogleAuthRequest
from project.repository import user_rep
from project.oauth2 import get_current_user
from project.jwt_handler import create_access_token
from project.hashing import Hash

load_dotenv()

router = APIRouter(tags=['–ö–æ—Ä–∏—Å—Ç—É–≤–∞—áüßî‚Äç‚ôÇÔ∏è'], prefix='/user')


@router.post("/", status_code=status.HTTP_201_CREATED)
def register(request: UserRegister, db:Session = Depends(get_db)):
    return user_rep.register(request, db)



@router.get("/",response_model= List[UserShowAll],status_code=status.HTTP_200_OK)
def get_users(
    db: Session = Depends(get_db),
    sort_by_subscription: Literal["–ó –ø—ñ–¥–ø–∏—Å–æ–∫–æ—é", "–ë–µ–∑ –ø—ñ–¥–ø–∏—Å–∫–∏", "–ü—Ä–æ—Å—Ä–æ—á–µ–Ω–æ"] | None = Query(None, description="–§—ñ–ª—å—Ç—Ä–∞—Ü—ñ—è –∑–∞ –Ω–∞—è–≤–Ω—ñ—Å—Ç—é –ø—ñ–¥–ø–∏—Å–∫–∏"),
    sort_by_rating: Literal["–ó–∞ –∑—Ä–æ—Å—Ç–∞–Ω–Ω—è–º", "–ó–∞ —Å–ø–∞–¥–∞–Ω–Ω—è–º"] | None = Query(None, description="–§—ñ–ª—å—Ç—Ä–∞—Ü—è –∑–∞ —Ä–µ–π—Ç–∏–Ω–≥–æ–º"),
    sort_by_name:  Literal["–ê-–Ø", "–Ø-–ê"] | None = Query(None, description="–§—ñ–ª—å—Ç—Ä–∞—Ü—ñ—è –∑–∞ –∞–ª—Ñ–∞–≤—ñ—Ç–æ–º"),
    sort_by_blocking:  Literal["–ó–∞–±–ª–æ–∫–æ–≤–∞–Ω—ñ", "–ù–µ –∑–∞–±–ª–æ–∫–æ–≤–∞–Ω—ñ"] | None = Query(None, description="–§—ñ–ª—å—Ç—Ä–∞—Ü—ñ—è –∑–∞ blocking"),
    current_user:dict = Depends(get_current_user)
):

    return user_rep.get_users(db= db, sort_by_subscription=sort_by_subscription, sort_by_rating=sort_by_rating, sort_by_name=sort_by_name,sort_by_blocking = sort_by_blocking ,current_user=current_user)

@router.put("/me/", status_code=status.HTTP_200_OK)
def update_info(
    email: EmailStr = Form(...),
    name: Annotated[str, MinLen(3), MaxLen(35)] = Form(...),
    surname: Annotated[str, MinLen(3), MaxLen(35)] = Form(...),
    image: UploadFile | str | None = File(None),
    db: Session = Depends(get_db),
    current_user: dict = Depends(get_current_user)
):
    if image == "" or image is None:
        image = None

    return user_rep.update_profile(
        email=email,
        name=name,
        surname=surname,
        image=image,
        db=db,
        current_user=current_user
    )


@router.post("/process_payment")
async def process_payment(
    payment: PaymentRequest,
    db: Session = Depends(get_db),
    current_user: dict = Depends(get_current_user)
):
    
    if current_user["role"] != "user":
        raise HTTPException(status_code=403, detail="–ù–µ–¥–æ—Å—Ç–∞—Ç–Ω—å–æ –ø—Ä–∞–≤")

    
    user_id = current_user.get("sub")
    if not user_id:
        raise HTTPException(status_code=401, detail="–ù–µ –≤–¥–∞–ª–æ—Å—è –≤–∏–∑–Ω–∞—á–∏—Ç–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞")
    
    
    
    user = db.query(User).filter(User.user_id == user_id).outerjoin(User.subscription).first()

    if not user:
        raise HTTPException(status_code=404, detail="–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∏–π")

    has_active_subscription = (
        user.subscription is not None and
        user.subscription.status == "–ê–∫—Ç–∏–≤–Ω–∞"
    )

    if has_active_subscription:
        raise HTTPException(status_code=429, detail="–£ –≤–∞—Å –≤–∂–µ —î –∞–∫—Ç–∏–≤–Ω–∞ –ø—ñ–¥–ø–∏—Å–∫–∞.")
    
    payment_token = payment.paymentToken  

    if payment_token == "examplePaymentMethodToken":
        # 1. –°—Ç–≤–æ—Ä—é—î–º–æ –ø—ñ–¥–ø–∏—Å–∫—É
        today = date.today()
        new_sub = Subscription(
            status="–ê–∫—Ç–∏–≤–Ω–∞",
            start_date=today,
            end_date=today + timedelta(days=30)
        )
        db.add(new_sub)
        db.commit()
        db.refresh(new_sub)

        # 2. –ü—Ä–∏–≤'—è–∑—É—î–º–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –¥–æ –ø—ñ–¥–ø–∏—Å–∫–∏
        user = db.query(User).filter(User.user_id == user_id).first()
        if not user:
            raise HTTPException(status_code=404, detail="–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ")

        user.subscription_id = new_sub.subscription_id
        db.commit()

        return {
            "status": "success",
            "subscription_id": new_sub.subscription_id,
            "message": "–û–ø–ª–∞—Ç–∞ –ø—Ä–æ–π—à–ª–∞ —É—Å–ø—ñ—à–Ω–æ (—Ç–µ—Å—Ç–æ–≤–∏–π —Ä–µ–∂–∏–º)"
        }
    else:
        return {
            "status": "error",
            "message": "–ù–µ–≤—ñ—Ä–Ω–∏–π —Ç–µ—Å—Ç–æ–≤–∏–π —Ç–æ–∫–µ–Ω"
        }
        


@router.post("/block/", status_code=status.HTTP_201_CREATED)
def block_user(request: BlockUser, db: Session = Depends(get_db), current_user: dict = Depends(get_current_user)):
    return user_rep.block_user(request = request, db = db, current_user=current_user)


GOOGLE_CLIENT_ID = os.getenv("GOOGLE_CLIENT_ID")


@router.post("/auth/google/")
def google_login(request: GoogleAuthRequest, db: Session = Depends(get_db)):
    try:
        
        idinfo = id_token.verify_oauth2_token(
            request.id_token,
            google_requests.Request(),
            GOOGLE_CLIENT_ID
        )

        
        email = idinfo.get("email")
        name = idinfo.get("given_name", "")
        surname = idinfo.get("family_name", "")

        if not email:
            raise HTTPException(status_code=400, detail="–ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ email –∑ Google")

        
        user = db.query(User).filter(User.email == email).first()

        if user:
            if user.blocking:
                raise HTTPException(status_code=400, detail="–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á –∑–∞–±–ª–æ–∫–æ–≤–∞–Ω–∏–π")
        else:
            
            user = User(
                email=email,
                name=name,
                surname=surname,
                password=Hash.bcrypt("google") 
            )
            db.add(user)
            db.commit()
            db.refresh(user)

        access_token = create_access_token(data={"sub": user.user_id, "role": "user"})

        return {
            "message": "–£—Å–ø—ñ—à–Ω–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—è —á–µ—Ä–µ–∑ Google",
            "access_token": access_token,
            "token_type": "bearer",
            "user": {
                "name": user.name,
                "surname": user.surname,
                "image": user.image.image_url if user.image else None
            }
        }

    except ValueError:
        raise HTTPException(status_code=401, detail="–ù–µ–≤—ñ—Ä–Ω–∏–π Google —Ç–æ–∫–µ–Ω")
